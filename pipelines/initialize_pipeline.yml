# Initialize Play/Build Environemnt


trigger: none

pool:
  vmImage: ubuntu-latest
variables:
- name: init
  value: true

steps:
- checkout: self
  submodules: "true"
  persistCredentials: "true"
  clean: "true"
  path: self

- bash: |
    pwd
    cd ../self
    pwd
    ls -ltr
    echo "##vso[task.setvariable variable=source_environment_hostname]`yq -e ".tenant.hostname" configs/play.yml`"
    echo "##vso[task.setvariable variable=source_environment_port]`yq -e ".tenant.port" configs/play.yml`"
    echo "##vso[task.setvariable variable=admin_user]`yq -e ".tenant.admin_username" configs/play.yml`"
    echo "##vso[task.setvariable variable=source_type]`yq -e ".tenant.type" configs/play.yml`"
    echo "##vso[task.setvariable variable=repo_user]`yq -e ".repo.user" configs/repo.yml`"
    echo "##vso[build.updatebuildnumber]$(Build.BuildNumber)-$(repoName)"
    echo $(System.DefaultWorkingDirectory)
  workingDirectory: '$(System.DefaultWorkingDirectory)'
  displayName: 'Get Environment Tenant Details'

- script: |
      cd ../
      
      ########GitHub 

      name=$(curl -u $(repo_user):$(PAT) https://api.github.com/repos/$(repo_user)/$(repoName) | jq -r '.name')
      echo ${name}
      if [ "$name" == null ]
      then
          echo "Repo does not exists, creating ..."
          mkdir -p $(repoName)
          cd $(repoName)

          #### Create empty repo
          curl -u $(repo_user):$(PAT) https://api.github.com/user/repos -d '{"name":"$(repoName)""}'
          
          #### Initiatialite and push to main
          echo "# wmio_project_b" >> README.md
          git init
          git config user.email "noemail.com"
          git config user.name "$(devUser)"
          git add README.md
          git commit -m "first commit"
          git branch -M production
          git remote add origin https://$(repo_user):$(PAT)@github.com/$(repo_user)/$(repoName).git
          git push -u origin production

          git checkout -b dev production
          git commit -m "first commit"
          git push -u origin dev

          git checkout -b qa production
          git commit -m "first commit"
          git push -u origin qa
          
          git checkout -b $(feature_branch_name) production
          git commit -m "first commit"
          git push -u origin $(feature_branch_name)
          echo "Repo creation done !!!"
      else
          echo "Repo already exixts with name:" ${name}
          echo "##vso[task.setvariable variable=init]false"
          exit 0
      fi
  displayName: 'Create a repo and required branches'
  
- script: |


      cd ../
      LOCAL_DEV_URL=https://$(source_environment_hostname):$(source_environment_port)
      echo ${LOCAL_DEV_URL}
      HOME_DIR=$(System.DefaultWorkingDirectory)/../
      echo $(init)
      if [ $(init) == true ]; then
        echo "New repo created"
        pwd
        ls -ltr
        ######## Check & Create Project 
        chmod 777 ./self/pipelines/scripts/*.sh
        ./self/pipelines/scripts/createProject.sh ${LOCAL_DEV_URL} $(admin_user) $(admin_password) $(repoName)

      else
        ######## Create a feature branch from prod 
        echo "Repo Exists, Check and sync feature branch from Prod"
        if [ -z "$(assetID)" ]; then
          echo "##vso[task.logissue type=error;]Missing parameter \"assetID\""
          echo "##vso[task.complete result=Failed;]"
          exit 1
        fi
                
        if [ -z "$(assetType)" ]; then
          echo "##vso[task.logissue type=error;]Missing parameter \"assetType\""
          echo "##vso[task.complete result=Failed;]"
          exit 1
        fi
        
          rm -rf ./$(repoName)

          git clone -b production https://$(repo_user):$(PAT)@github.com/$(repo_user)/$(repoName).git
          cd $(repoName)
          branchExists=$(git ls-remote --exit-code --heads origin $(feature_branch_name))
          if [ ! -z "${branchExists// }" ]; 
          then
              echo "Branch $(feature_branch_name) already exists"
          else
              # Creating Feature Branch 
              echo "Branch does not exists. Creating Branch ..."
              git config user.email "noemail.com"
              git config user.name "$(devUser)"
              git checkout -b $(feature_branch_name) production
              git add .
              git commit -m "Synching from Prod for feature branch $(feature_branch_name)"
              git push -u origin $(feature_branch_name)
              # Project Check
              chmod 777 ../self/pipelines/scripts/*.sh
              echo "Check and create Project ..."
              ../self/pipelines/scripts/createProject.sh ${LOCAL_DEV_URL} $(admin_user) $(admin_password) $(repoName) 
              # Import
                  echo "Importing asset ..."
              ../self/pipelines/scripts/importAsset.sh ${LOCAL_DEV_URL} $(admin_user) $(admin_password) $(repoName) $(assetID) $(assetType)  ${HOME_DIR}

              
          fi
      fi
  displayName: 'Create / Sychronize the projects'
  