# Initialize Play/Build Environemnt


trigger: none

pool:
  vmImage: ubuntu-latest
variables:
- name: init
  value: true
steps:
- checkout: self
  submodules: "true"
  persistCredentials: "true"
  clean: "true"
  path: self

- bash: |
    pwd
    cd ../self
    pwd
    ls -ltr
    echo "##vso[task.setvariable variable=source_environment_hostname]`yq -e ".tenant.hostname" configs/play.yml`"
    echo "##vso[task.setvariable variable=source_environment_port]`yq -e ".tenant.port" configs/play.yml`"
    echo "##vso[task.setvariable variable=exporter_user]`yq -e ".tenant.exporter_username" configs/play.yml`"
    echo "##vso[task.setvariable variable=source_type]`yq -e ".tenant.type" configs/play.yml`"
    echo "##vso[task.setvariable variable=repo_user]`yq -e ".repo.user" configs/repo.yml`"
    
    PROJECTNAME=$(perl -MURI::Escape -e 'print uri_escape($ARGV[0]);' "$PROJECTNAME")
    echo ${PROJECTNAME}
    echo "##vso[build.updatebuildnumber]$(Build.BuildNumber)-${PROJECTNAME}"
    echo $(System.DefaultWorkingDirectory)
  workingDirectory: '$(System.DefaultWorkingDirectory)'
  displayName: 'Get Environment Tenant Details'

- script: |
      cd ../
      
      ########GitHub 

      name=$(curl -u $(repo_user):$(PAT) https://api.github.com/repos/$(repo_user)/$(repoName) | jq -r '.name')
      echo ${name}
      if [ "$name" == null ]
      then
          echo "Repo does not exists, creating ..."
          mkdir -p $(repoName)
          cd $(repoName)

          #### Create empty repo
          curl -u $(repo_user):$(PAT) https://api.github.com/user/repos -d '{"name":"$(repoName)""}'
          
          #### Initiatialite and push to main
          echo "# wmio_project_b" >> README.md
          git init
          git config user.email "noemail.com"
          git config user.name "$(repo_user)"
          git add README.md
          git commit -m "first commit"
          git branch -M production
          git remote add origin https://$(repo_user):$(PAT)@github.com/$(repo_user)/$(repoName).git
          git push -u origin production

          git checkout -b dev production
          git commit -m "first commit"
          git push -u origin dev

          git checkout -b qa production
          git commit -m "first commit"
          git push -u origin qa
          
          git checkout -b $(feature_branch_name) production
          git commit -m "first commit"
          git push -u origin $(feature_branch_name)

      else
          echo "Repo already exixts with id:" ${name}
          echo "##vso[task.setvariable variable=init]false"
          exit 0
      fi
  displayName: 'Create a repo and required branches'
  
- script: |

      cd ../
      echo ${{ variables.init }}
      echo ยง(init)
      if [ "$(init)" == true ]
        ######## Check Project Exists 

        name=$(curl --location --request GET 'https://insrsaeu.int-aws-de.webmethods.io/apis/v1/rest/projects/wmio_project_b' \
                --header 'Accept: application/json' \
                -u $(exporter_user):$(exporter_password)) | jq -r '.output.name')
        echo ${name}
        if [ "$name" == null ]
        then
            echo "Repo does not exists, creating ..."

            #### Create project in the tenant
            curl -u $(repo_user):$(PAT) https://api.github.com/user/repos -d '{"name":"$(repoName)""}'

        else
            echo "Projecxt already exixts with id:" ${name}
            exit 0
        fi
      else
        ######## Create a feature branch from prod 
          mkdir -p $(repoName)
          cd $(repoName)
          git checkout -b $(feature_branch_name) production
      fi

  
  displayName: 'Create a repo and required branches'