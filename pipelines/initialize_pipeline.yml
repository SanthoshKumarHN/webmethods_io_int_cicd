# Export workflow pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

pool:
  vmImage: ubuntu-latest
steps:
- checkout: self
  submodules: "true"
  persistCredentials: "true"
  clean: "true"
  path: self

- bash: |
    pwd
    cd ../self
    pwd
    ls -ltr
    echo "##vso[task.setvariable variable=source_environment_hostname]`yq -e ".tenant.hostname" configs/dev.yml`"
    echo "##vso[task.setvariable variable=source_environment_port]`yq -e ".tenant.port" configs/dev.yml`"
    echo "##vso[task.setvariable variable=exporter_user]`yq -e ".tenant.exporter_username" configs/dev.yml`"
    echo "##vso[task.setvariable variable=source_type]`yq -e ".tenant.type" configs/dev.yml`"
    echo "##vso[task.setvariable variable=repo_user]`yq -e ".repo.user" configs/repo.yml`"
    
    PROJECTNAME=$(perl -MURI::Escape -e 'print uri_escape($ARGV[0]);' "$PROJECTNAME")
    echo ${PROJECTNAME}
    echo "##vso[build.updatebuildnumber]$(Build.BuildNumber)-${PROJECTNAME}"
    echo $(System.DefaultWorkingDirectory)
  workingDirectory: '$(System.DefaultWorkingDirectory)'
  displayName: 'Get Environment Tenant Details'

- script: |
      # Write your commands here
      cd ../
      id=$(curl -u $(repo_user):$(PAT) https://api.github.com/repos/$(repo_user)/$(repoName) | jq -r '.id')
      echo ${id}
      if [ -z "$id" ]
      then
          echo "Repo does not exists, creating ..."
          mkdir -p $(repoName)
          cd $(repoName)
          touch README.md
          git init
          git config user.email "noemail.com"
          git config user.name "refPlatform"
          git branch -m main
          git add README.md
          git commit -m "first commit"
          git remote add origin git@github.com:$(repo_user)/$(repoName).git

          curl -u $(repo_user):$(PAT) https://api.github.com/user/repos -d '{"name":"$(repoName)""}'
      else
          echo "Repo already exixts with id:" ${id}
          exit
      fi
      
        

      
      
  displayName: 'Create a repo and required branches'
  failOnStderr: true
