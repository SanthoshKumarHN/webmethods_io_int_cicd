# Export workflow pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

pool:
  vmImage: ubuntu-latest
resources:
  repositories:
  - repository: wmio_project_a
    type: github
    endpoint: github
    name: wmio_project_a
steps:
- bash: |
    echo "##vso[task.setvariable variable=source_environment_hostname]`yq -e ".tenant.hostname" configs/dev.yml`"
    echo "##vso[task.setvariable variable=source_environment_port]`yq -e ".tenant.port" configs/dev.yml`"
    echo "##vso[task.setvariable variable=exporter_user]`yq -e ".tenant.exporter_username" configs/dev.yml`"
    echo "##vso[task.setvariable variable=source_type]`yq -e ".tenant.type" configs/dev.yml`"
    PROJECTNAME=$(perl -MURI::Escape -e 'print uri_escape($ARGV[0]);' "$PROJECTNAME")
    echo ${PROJECTNAME}
    echo "##vso[build.updatebuildnumber]$(Build.BuildNumber)-${PROJECTNAME}"
    echo $(System.DefaultWorkingDirectory)
  workingDirectory: '$(System.DefaultWorkingDirectory)'
  displayName: 'Get Environment Tenant Details'
- script: |
    echo $(source_environment_hostname)
    echo $(source_environment_port)
    echo $(exporter_user)
    echo $(source_type)
    PROJECTNAME=$(perl -MURI::Escape -e 'print uri_escape($ARGV[0]);' "$PROJECTNAME")
    echo ${PROJECTNAME}
    echo ${WORKFLOWID}
  
    LOCAL_DEV_URL=https://$(source_environment_hostname):$(source_environment_port)
    echo ${LOCAL_DEV_URL}
    EXPORT_URL=${LOCAL_DEV_URL}/apis/v1/rest/projects/${PROJECTNAME}/workflows/${WORKFLOWID}/export
    echo ${EXPORT_URL}
    echo ${PWD}
    echo $(exporter_user):$(exporter_password)
    downloadURL=$(curl  --location --request POST ${EXPORT_URL} \
    --header 'Content-Type: application/json' \
    --header 'Accept: application/json' \
    -u $(exporter_user):$(exporter_password)| jq -r '.output.download_link')
    
    regex='(https?|ftp|file)://[-[:alnum:]\+&@#/%?=~_|!:,.;]*[-[:alnum:]\+&@#/%=~_|]'
    
    if [[ $downloadURL =~ $regex ]]
    then 
       echo ${downloadURL}
    else
        echo "Download link could not be retrieved"
        exit 1
    fi
    mkdir $(Build.BuildNumber)
    cd $(Build.BuildNumber)
    curl --location --request GET ${downloadURL} --output $(Build.BuildNumber).zip
    ls -ltr
  displayName: 'Export Workflow'


- script: |
    echo ${pwd}
    ls -ltr
    cd $(Build.BuildNumber)
    git config user.email "noemail.com"
    git config user.name "refPlatform"
    git checkout -b featureA
    git add $(Build.BuildNumber).zip
    git commit -m "push the wmio exported back to repository from pipeline"
    git push -u origin featureA
  displayName: 'Commit the code to feature branch'
